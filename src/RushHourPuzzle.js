import React, { useState } from 'react';
import Web3 from 'web3';

const contractABI = [
	{
		"inputs": [
			{
				"internalType": "uint8[6][6]",
				"name": "board",
				"type": "uint8[6][6]"
			}
		],
		"name": "solve",
		"outputs": [
			{
				"components": [
					{
						"internalType": "uint8",
						"name": "carId",
						"type": "uint8"
					},
					{
						"internalType": "enum IRushHourSolver.MovementDirection",
						"name": "direction",
						"type": "uint8"
					}
				],
				"internalType": "struct IRushHourSolver.Step[]",
				"name": "",
				"type": "tuple[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];

const contractBytecode = "6080604052348015600f57600080fd5b50611c668061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806375c0682c14610030575b600080fd5b61004a600480360381019061004591906116e6565b610060565b6040516100579190611878565b60405180910390f35b606061006a61142d565b60606000610077856102c3565b8093508192505050610088826108aa565b5061009681600084866108d7565b506000836000015167ffffffffffffffff8111156100b7576100b66114cb565b5b6040519080825280602002602001820160405280156100f057816020015b6100dd611454565b8152602001906001900390816100d55790505b50905060005b84600001518110156102b657600061014a8561012c886020015185606481106101225761012161189a565b5b60200201516109dd565b8151811061013d5761013c61189a565b5b60200260200101516109f3565b036101ff5760405180604001604052806001610180886020015185606481106101765761017561189a565b5b60200201516109dd565b61018a91906118f8565b60ff16815260200160006101b8886020015185606481106101ae576101ad61189a565b5b60200201516109f3565b146101c45760036101c7565b60015b60038111156101d9576101d861174f565b5b8152508282815181106101ef576101ee61189a565b5b60200260200101819052506102ab565b60405180604001604052806001610230886020015185606481106102265761022561189a565b5b60200201516109dd565b61023a91906118f8565b60ff16815260200160006102688860200151856064811061025e5761025d61189a565b5b60200201516109f3565b14610274576000610277565b60025b60038111156102895761028861174f565b5b81525082828151811061029f5761029e61189a565b5b60200260200101819052505b8060010190506100f6565b5080945050505050919050565b60006060600080600080600090505b600681101561036c5760005b600681101561036057828883600681106102fb576102fa61189a565b5b602002015182600681106103125761031161189a565b5b602002015160ff161115610355578782600681106103335761033261189a565b5b6020020151816006811061034a5761034961189a565b5b602002015160ff1692505b8060010190506102de565b508060010190506102d2565b508067ffffffffffffffff811115610387576103866114cb565b5b6040519080825280602002602001820160405280156103b55781602001602082028036833780820191505090505b50935060005b60068110156106e95760005b60068110156106d7578782600681106103e3576103e261189a565b5b602002015181600681106103fa576103f961189a565b5b602002015160ff169450600085146106c6578461041690611937565b94506104228282610a01565b9350600061044987878151811061043c5761043b61189a565b5b60200260200101516109dd565b111561060e576002846104758888815181106104685761046761189a565b5b60200260200101516109dd565b61047f919061198f565b14806104b857506006846104ac88888151811061049f5761049e61189a565b5b60200260200101516109dd565b6104b6919061198f565b145b15610567576104eb60008787815181106104d5576104d461189a565b5b6020026020010151610a3390919063ffffffff16565b8686815181106104fe576104fd61189a565b5b60200260200101818152505061054381600561051a91906119c0565b87878151811061052d5761052c61189a565b5b6020026020010151610a6d90919063ffffffff16565b8686815181106105565761055561189a565b5b60200260200101818152505061060d565b610595600187878151811061057f5761057e61189a565b5b6020026020010151610a3390919063ffffffff16565b8686815181106105a8576105a761189a565b5b6020026020010181815250506105ed8260056105c491906119c0565b8787815181106105d7576105d661189a565b5b6020026020010151610a6d90919063ffffffff16565b868681518110610600576105ff61189a565b5b6020026020010181815250505b5b838686815181106106225761062161189a565b5b6020026020010181815161063691906119f4565b9150818152505061069860016106658888815181106106585761065761189a565b5b6020026020010151610aa7565b61066f91906119f4565b8787815181106106825761068161189a565b5b6020026020010151610abc90919063ffffffff16565b8686815181106106ab576106aa61189a565b5b60200260200101818152505083876106c391906119f4565b96505b806106d090611a28565b90506103c7565b50806106e290611a28565b90506103bb565b5060005b84518110156107645761072f8160056107069190611ba3565b8683815181106107195761071861189a565b5b6020026020010151610af690919063ffffffff16565b8582815181106107425761074161189a565b5b6020026020010181815250506107588582610b25565b508060010190506106ed565b5060005b84518110156108935760036107968683815181106107895761078861189a565b5b6020026020010151610aa7565b03610888576107e1600186516107ac91906119c0565b60056107b89190611ba3565b8683815181106107cb576107ca61189a565b5b6020026020010151610af690919063ffffffff16565b8582815181106107f4576107f361189a565b5b6020026020010181815250506108468160056108109190611ba3565b866001885161081f91906119c0565b815181106108305761082f61189a565b5b6020026020010151610af690919063ffffffff16565b856001875161085591906119c0565b815181106108665761086561189a565b5b60200260200101818152505061087e85516001610b9f565b50505050506108a5565b806001019050610768565b506108a084516000610b9f565b505050505b915091565b60008061271060036108bb85610c0a565b901b6108c791906119f4565b9050600181536001915050919050565b6000838260000151111580156108f1575060008260000151115b156108ff57600090506109d5565b60005b83518110156109d35761092e8482815181106109215761092061189a565b5b60200260200101516109dd565b6109518583815181106109445761094361189a565b5b6020026020010151610c8b565b1461099557610986868287876109808987815181106109735761097261189a565b5b6020026020010151610ca8565b88610cbd565b1561099057600191505b6109c8565b6109a486828787600088610cbd565b156109ae57600191505b6109bd86828787600188610cbd565b156109c757600191505b5b806001019050610902565b505b949350505050565b600067ffffffffffffffff801682169050919050565b600060ff82901c9050919050565b600081836008610a119190611bee565b6036610a1d91906119c0565b610a2791906119c0565b6001901b905092915050565b600060ff82901b9150827f800000000000000000000000000000000000000000000000000000000000000019169250818317905092915050565b600060f882901b9150827f070000000000000000000000000000000000000000000000000000000000000019169250818317905092915050565b6000600282901b915060fd82901c9050919050565b600060fb82901b9150827f380000000000000000000000000000000000000000000000000000000000000019169250818317905092915050565b600060c082901b91508260088060c067ffffffffffffffff8016901b901b901c19169250818317905092915050565b6000610b76610b4d848481518110610b4057610b3f61189a565b5b60200260200101516109dd565b848481518110610b6057610b5f61189a565b5b602002602001015161117090919063ffffffff16565b838381518110610b8957610b8861189a565b5b6020026020010181815250506001905092915050565b6000600a831115610bb35760009050610c04565b6000600184610bc291906119c0565b6005610bce9190611ba3565b905060008360018114610bed576005830260051b612710019150610bf8565b8260051b6127100191505b50806040525060019150505b92915050565b60008060005b8351811015610c8157610c3c848281518110610c2f57610c2e61189a565b5b6020026020010151611198565b610c5f858381518110610c5257610c5161189a565b5b60200260200101516111ad565b610c699190611bee565b82610c7491906119f4565b9150806001019050610c10565b5080915050919050565b600060408067ffffffffffffffff8016901b8316901c9050919050565b6000600182901b915060ff82901c9050919050565b600081600001518510158015610cd7575060008260000151115b15610ce55760009050611166565b6024851115610cf75760009050611166565b6000610d1c858881518110610d0f57610d0e61189a565b5b60200260200101516109dd565b90506000610d43868981518110610d3657610d3561189a565b5b60200260200101516109f3565b03610d6057610d538882866111d2565b8092508199505050610d74565b610d6b888286611204565b80925081995050505b6000818916148015610da457506000667e7e7e7e7e7e0067ffffffffffffffff8016610da091906119c0565b8216145b15611160576000610dce868981518110610dc157610dc061189a565b5b6020026020010151611198565b905060008503610e3557610e11600182610de891906119c0565b878a81518110610dfb57610dfa61189a565b5b6020026020010151610a6d90919063ffffffff16565b868981518110610e2457610e2361189a565b5b602002602001018181525050610e8e565b610e6e600182610e4591906119f4565b878a81518110610e5857610e5761189a565b5b6020026020010151610a6d90919063ffffffff16565b868981518110610e8157610e8061189a565b5b6020026020010181815250505b610e988688611236565b156111125786610ea790611a28565b96508189610eb591906119f4565b98506000865167ffffffffffffffff811115610ed457610ed36114cb565b5b604051908082528060200260200182016040528015610f025781602001602082028036833780820191505090505b50905060005b8751811015610f5657878181518110610f2457610f2361189a565b5b6020026020010151828281518110610f3f57610f3e61189a565b5b602002602001018181525050806001019050610f08565b50610f8482888b81518110610f6e57610f6d61189a565b5b6020026020010151610a6d90919063ffffffff16565b878a81518110610f9757610f9661189a565b5b6020026020010181815250506000610fb8878b610a3390919063ffffffff16565b905060008a148015610fce575064060000000084145b156110215780866020015160018b610fe691906119c0565b60648110610ff757610ff661189a565b5b602002018181525050888660000181815250508a8660400181815250506001945050505050611166565b61104e84838c815181106110385761103761189a565b5b602002602001015161129a90919063ffffffff16565b828b815181106110615761106061189a565b5b60200260200101818152505061109a87838c815181106110845761108361189a565b5b60200260200101516112b790919063ffffffff16565b828b815181106110ad576110ac61189a565b5b6020026020010181815250506110c3828b6112f1565b506110d08b8a84896108d7565b1561110f5780866020015160018b6110e891906119c0565b606481106110f9576110f861189a565b5b6020020181815250506001945050505050611166565b50505b61113f81878a815181106111295761112861189a565b5b6020026020010151610a6d90919063ffffffff16565b8689815181106111525761115161189a565b5b602002602001018181525050505b60009150505b9695505050505050565b6000604082901b915082604067ffffffffffffffff8016901b19169250818317905092915050565b6000600582901b915060fd82901c9050919050565b600060c060088060c067ffffffffffffffff8016901b901b901c8316901c9050919050565b600080838503945082600081146111ee578460011b94506111f5565b8460011c94505b50848491509150935093915050565b60008083850394508260008114611220578460081b9450611227565b8460081c94505b50848491509150935093915050565b600080612710600361124786610c0a565b901b61125391906119f4565b90506000815190508060f81c90506000810361127757838253600192505050611294565b8381111561128d57838253600192505050611294565b6000925050505b92915050565b60008267ffffffffffffffff801619169250818317905092915050565b600060fe82901b9150827f400000000000000000000000000000000000000000000000000000000000000019169250818317905092915050565b600080600090505b835181101561137f5782810361131957611313848461138a565b50611374565b600061133e8583815181106113315761133061189a565b5b6020026020010151610c8b565b6113618686815181106113545761135361189a565b5b60200260200101516109dd565b1614611373576113718482610b25565b505b5b8060010190506112f9565b506001905092915050565b6000806113b08484815181106113a3576113a261189a565b5b60200260200101516109dd565b6113d38585815181106113c6576113c561189a565b5b6020026020010151610c8b565b179050611403818585815181106113ed576113ec61189a565b5b602002602001015161117090919063ffffffff16565b8484815181106114165761141561189a565b5b602002602001018181525050600191505092915050565b604051806060016040528060008152602001611447611483565b8152602001600081525090565b6040518060400160405280600060ff1681526020016000600381111561147d5761147c61174f565b5b81525090565b60405180610c800160405280606490602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611503826114ba565b810181811067ffffffffffffffff82111715611522576115216114cb565b5b80604052505050565b60006115356114a6565b905061154182826114fa565b919050565b600067ffffffffffffffff821115611561576115606114cb565b5b602082029050919050565b600080fd5b600067ffffffffffffffff82111561158c5761158b6114cb565b5b602082029050919050565b600060ff82169050919050565b6115ad81611597565b81146115b857600080fd5b50565b6000813590506115ca816115a4565b92915050565b60006115e36115de84611571565b61152b565b905080602084028301858111156115fd576115fc61156c565b5b835b81811015611626578061161288826115bb565b8452602084019350506020810190506115ff565b5050509392505050565b600082601f830112611645576116446114b5565b5b60066116528482856115d0565b91505092915050565b600061166e61166984611546565b61152b565b90508060c084028301858111156116885761168761156c565b5b835b818110156116b1578061169d8882611630565b84526020840193505060c08101905061168a565b5050509392505050565b600082601f8301126116d0576116cf6114b5565b5b60066116dd84828561165b565b91505092915050565b600061048082840312156116fd576116fc6114b0565b5b600061170b848285016116bb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61174981611597565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061178f5761178e61174f565b5b50565b60008190506117a08261177e565b919050565b60006117b082611792565b9050919050565b6117c0816117a5565b82525050565b6040820160008201516117dc6000850182611740565b5060208201516117ef60208501826117b7565b50505050565b600061180183836117c6565b60408301905092915050565b6000602082019050919050565b600061182582611714565b61182f818561171f565b935061183a83611730565b8060005b8381101561186b57815161185288826117f5565b975061185d8361180d565b92505060018101905061183e565b5085935050505092915050565b60006020820190508181036000830152611892818461181a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061190382611597565b915061190e83611597565b9250828201905060ff811115611927576119266118c9565b5b92915050565b6000819050919050565b60006119428261192d565b915060008203611955576119546118c9565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061199a8261192d565b91506119a58361192d565b9250826119b5576119b4611960565b5b828204905092915050565b60006119cb8261192d565b91506119d68361192d565b92508282039050818111156119ee576119ed6118c9565b5b92915050565b60006119ff8261192d565b9150611a0a8361192d565b9250828201905080821115611a2257611a216118c9565b5b92915050565b6000611a338261192d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a6557611a646118c9565b5b600182019050919050565b60008160011c9050919050565b6000808291508390505b6001851115611ac757808604811115611aa357611aa26118c9565b5b6001851615611ab25780820291505b8081029050611ac085611a70565b9450611a87565b94509492505050565b600082611ae05760019050611b9c565b81611aee5760009050611b9c565b8160018114611b045760028114611b0e57611b3d565b6001915050611b9c565b60ff841115611b2057611b1f6118c9565b5b8360020a915084821115611b3757611b366118c9565b5b50611b9c565b5060208310610133831016604e8410600b8410161715611b725782820a905083811115611b6d57611b6c6118c9565b5b611b9c565b611b7f8484846001611a7d565b92509050818404811115611b9657611b956118c9565b5b81810290505b9392505050565b6000611bae8261192d565b9150611bb98361192d565b9250611be67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611ad0565b905092915050565b6000611bf98261192d565b9150611c048361192d565b9250828202611c128161192d565b91508282048414831517611c2957611c286118c9565b5b509291505056fea26469706673582212202b686c3857ce3e02c0a62a11ba036d59c96852d4fd8cab15126dbf5871bd56c964736f6c634300081a0033";

const chains = [
    { id: 0, name: 'Local Testnet (localhost:8545)', rpc: 'http://127.0.0.1:8545' },
    { id: 1, name: 'BNB Mainnet', rpc: 'https://bsc-dataseed.binance.org/' },
    { id: 2, name: 'BNB Testnet', rpc: 'https://data-seed-prebsc-1-s1.binance.org:8545/' },
    { id: 3, name: 'Ethereum Mainnet', rpc: 'https://mainnet.infura.io/v3/02c958e4232a47d0b6f14d5317326075' },
    { id: 4, name: 'Ethereum Sepolia Testnet', rpc: 'https://sepolia.infura.io/v3/02c958e4232a47d0b6f14d5317326075' },
];

const RushHourPuzzle = () => {
    const [selectedChain, setSelectedChain] = useState(chains[0].rpc);
    const [privateKey, setPrivateKey] = useState('');
    const [contractAddress, setContractAddress] = useState('');
    const [inputValue, setInputValue] = useState('');
    const [outputValue, setOutputValue] = useState('');

    function parseArrayInput(input) {
        const cleanedInput = input.replace(/\s/g, '').replace(/^[^[]*/, '').replace(/[^\]]*$/, '');
        const parseRow = (row) => {
            return row.split(',')
                .map(item => item.trim())
                .filter(item => item !== '')
                .map(item => {
                    const num = parseInt(item, 10);
                    return isNaN(num) ? 0 : num;
                });
        };
        const content = cleanedInput.replace(/^\[|\]$/g, '');
        const rows = content.split('],[');

        return rows.map(row => parseRow(row.replace(/[\[\]]/g, '')));
    }

    const deployContract = async () => {
        if (privateKey === '') return;

        const web3 = new Web3(selectedChain);
        const account = web3.eth.accounts.privateKeyToAccount(privateKey);
        web3.eth.accounts.wallet.add(account);
        const rushHourSolver = new web3.eth.Contract(contractABI);

        try {
            const deployTx = rushHourSolver.deploy({
                data: contractBytecode,
                arguments: [] // Add constructor arguments if any
            });

            const gas = await deployTx.estimateGas();

            const deployedContract = await deployTx.send({
                from: account.address,
                gas
            });

            setContractAddress(deployedContract.options.address);
            setOutputValue('Contract deployed at:' + deployedContract.options.address);
        } catch (error) {
            setOutputValue('Error deploying contract:' + error);
        }
    }

    const solveOutput = async () => {
        if (privateKey === '' || contractAddress === '' || inputValue === '') return;

        const web3 = new Web3(selectedChain);
        const account = web3.eth.accounts.privateKeyToAccount(privateKey);
        web3.eth.accounts.wallet.add(account);
        const rushHourSolver = new web3.eth.Contract(contractABI, contractAddress);
        const input = parseArrayInput(inputValue);
        try {
            setOutputValue('Calling solve function...\n');
            const result = await rushHourSolver.methods.solve(input).call({ from: account.address, gas: '10000000000' });

            var outputStr;
            if (Array.isArray(result) && result.length > 0) {
                outputStr = '[\n';
                result.forEach((step, index) => {
                    const directionMap = ['Up', 'Right', 'Down', 'Left'];
                    const direction = directionMap[Number(step.direction)];
                    outputStr += `   Step(${step.carId}, MovementDirection.${direction})\n`;
                });
                outputStr += ']\n';
                setOutputValue(outputStr);
            } else {
                setOutputValue('[]\n');
            }
        } catch (error) {
            setOutputValue('Error calling solve function:' + error);
        }
    };

    return (
        <div style={{ padding: '3rem', maxWidth: '700px', margin: '0 auto' }}>
            <div style={{ border: '1px solid #ccc', borderRadius: '8px', padding: '1rem', marginBottom: '1rem', paddingLeft: '2rem', paddingRight: '2rem' }}>
                <a href='./RushHourSolver.sol' download={'RushHourSolver.sol'}><h2 style={{ marginTop: '2rem', marginBottom: '2rem' }}>RushHourPuzzle Contract Deployer and Solve</h2></a>
                <div style={{ marginBottom: '1rem' }}>
                    <select
                        value={selectedChain}
                        onChange={(e) => {setSelectedChain(e.target.value); setOutputValue('')}}
                        style={{ width: '100%', padding: '0.5rem' }}
                    >
                        {chains.map((chain) => (
                            <option key={chain.id} value={chain.rpc}>
                                {chain.name}
                            </option>
                        ))}
                    </select>
                </div>
                <button
                    onClick={deployContract}
                    style={{ width: '100%', padding: '0.5rem', marginBottom: '1rem', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
                >
                    Deploy Contract
                </button>
                <h3>Private Key</h3>
                <div style={{ display: 'flex', marginBottom: '1rem' }}>
                    <input
                        type="text"
                        value={privateKey}
                        onChange={(e) => setPrivateKey(e.target.value)}
                        placeholder="Private Key"
                        style={{ flexGrow: 1, marginRight: '0.5rem', padding: '0.5rem' }}
                    />
                </div>
                <h3>Contract Address</h3>
                <div style={{ display: 'flex', marginBottom: '1rem' }}>
                    <input
                        type="text"
                        value={contractAddress}
                        onChange={(e) => setContractAddress(e.target.value)}
                        placeholder="Contract Address"
                        style={{ flexGrow: 1, marginRight: '0.5rem', padding: '0.5rem' }}
                    />
                </div>
                <h3>Input</h3>
                <div style={{ display: 'flex', marginBottom: '1rem' }}>
                    <textarea
                        type="text"
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                        placeholder="Enter Input Value"
                        rows={8}
                        style={{ flexGrow: 1, marginRight: '0.5rem', padding: '0.5rem' }}
                    />
                    <button
                        onClick={solveOutput}
                        style={{ padding: '0.5rem', backgroundColor: '#008CBA', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
                    >
                        Solve
                    </button>
                </div>
                <h3>Output</h3>
                <div style={{ display: 'flex', marginBottom: '1rem' }}>
                    <textarea
                        type="text"
                        value={outputValue}
                        placeholder="Output value"
                        rows={8}
                        disabled
                        style={{ flexGrow: 1, marginRight: '0.5rem', padding: '0.5rem' }}
                    />
                </div>
            </div>
        </div>
    );
};

export default RushHourPuzzle;